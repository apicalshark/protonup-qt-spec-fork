name: Update Spec Version

on:
  schedule:
    - cron: '0 0 * * 1'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  check_and_update:
    runs-on: ubuntu-latest
    env:
      TARGET_REPO: "DavidoTek/ProtonUp-Qt"
      SPEC_FILE: "ProtonUp-Qt.spec"
      TAG_PREFIX: "v"

    steps:
      - name: Checkout local repository
        uses: actions/checkout@v3

      - name: Get latest release tag from GitHub
        id: get_remote_tag
        run: |
          LATEST_TAG=$(curl -s "https://api.github.com/repos/${{ env.TARGET_REPO }}/releases/latest" | jq -r '.tag_name')
          
          # --- IMPROVEMENT: More robust check for a valid tag ---
          if [[ -z "$LATEST_TAG" || "$LATEST_TAG" == "null" ]]; then
            echo "::error::Could not fetch a valid latest tag from GitHub API for ${{ env.TARGET_REPO }}. Got: '$LATEST_TAG'"
            exit 1
          fi

          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

          TAG_PREFIX="${{ env.TAG_PREFIX }}"
          if [[ -n "$TAG_PREFIX" ]]; then
            REMOTE_VERSION="${LATEST_TAG#"$TAG_PREFIX"}"
            echo "Removed prefix '${TAG_PREFIX}'. Full tag: ${LATEST_TAG}, Version: ${REMOTE_VERSION}"
          else
            REMOTE_VERSION="$LATEST_TAG"
            echo "No prefix to remove. Full tag: ${LATEST_TAG}, Version: ${REMOTE_VERSION}"
          fi
          
          echo "REMOTE_VERSION=$REMOTE_VERSION" >> $GITHUB_ENV
          echo "remote_version=$REMOTE_VERSION" >> $GITHUB_OUTPUT

      - name: Get local spec version
        id: get_local_version
        run: |
          LOCAL_VERSION=$(awk -F ': ' '/^Version:/ {print $2}' ${{ env.SPEC_FILE }})

          # --- IMPROVEMENT: Validate the local version format ---
          if ! [[ "$LOCAL_VERSION" =~ ^[0-9] ]]; then
            echo "::error::Invalid local version found in ${{ env.SPEC_FILE }}: '$LOCAL_VERSION'. Version must start with a digit."
            exit 1
          fi

          echo "LOCAL_VERSION=$LOCAL_VERSION" >> $GITHUB_ENV
          echo "local_version=$LOCAL_VERSION" >> $GITHUB_OUTPUT

      - name: Compare versions and update spec file
        id: compare_versions
        run: |
          REMOTE_VERSION="${{ steps.get_remote_tag.outputs.remote_version }}"
          LOCAL_VERSION="${{ steps.get_local_version.outputs.local_version }}"

          echo "Remote Version ($REMOTE_VERSION) vs. Local Version ($LOCAL_VERSION)"

          if dpkg --compare-versions "$REMOTE_VERSION" "gt" "$LOCAL_VERSION"; then
            echo "Remote version is newer. Updating spec file..."
            sed -i "s/^Version: *${LOCAL_VERSION}$/Version: ${REMOTE_VERSION}/" ${{ env.SPEC_FILE }}
            echo "updated_spec=true" >> $GITHUB_OUTPUT
          else
            echo "Local version is up-to-date or newer. No update needed."
            echo "updated_spec=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and Push Changes
        if: steps.compare_versions.outputs.updated_spec == 'true'
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add ${{ env.SPEC_FILE }}
          git commit -m "chore: Update ${{ env.SPEC_FILE }} to version ${{ env.REMOTE_VERSION }}"
          git push
